%%%==============================================================================
%% Copyright 2022-23 by Alceu Frigeri
%%
%% This work may be distributed and/or modified under the conditions of
%%
%% * The [LaTeX Project Public License](http://www.latex-project.org/lppl.txt),
%%   version 1.3c (or later), and/or
%% * The [GNU Affero General Public License](https://www.gnu.org/licenses/agpl-3.0.html),
%%   version 3 (or later)
%%
%% This work has the LPPL maintenance status *maintained*.
%%
%% The Current Maintainer of this work is Alceu Frigeri
%%
%% This is version {2.0} {2023/11/23}
%%
%% The list of files that compose this work can be found in the README.md file at
%% https://ctan.org/pkg/ufrgscca
%%
%%%==============================================================================
%% UFRGS stands for "Federal University of Rio Grande do Sul" in south Brazil
%% EE    stands for "Engineering School"
%% CCA   stands for "Control and Automation Engineering Course" (Portuguese acronym)
%%%==============================================================================
\NeedsTeXFormat{LaTeX2e}[2022/06/01]


\ProvidesExplPackage
    {ufrgscca-coord}
    {2023/11/23}
    {2.0}
    {UFRGS/CCA coord commands}


%%%%%%%
%%%
%%% Just an attempt of having my packages info in a regular way
%%% Idea being: { <pck-name> / pkg info } for each and all.
%%%
%%%%%%%
\keys_define:nn { ufrgscca-coord / pkg info}
  {
     name        .code:n = {ufrgscca-coord} ,
     prefix      .code:n = {ufrgscca} ,
     date        .code:n = {2023/11/23},
     version     .code:n = {2.0} ,
     description .code:n = {UFRGS/CCA~ coordination~ report~ commands}
  }
\cs_if_exist:NF \__codedesc_pkg_info:nn 
  {
    \cs_new_protected:Npn \__codedesc_pkg_info:nn #1#2
      { \keys_set:nn {#1 / pkg info}{#2} }
  }
\cs_if_exist:NF \PkgInfo
  { \NewDocumentCommand \PkgInfo {mm} { \keys_set:nn {#1 / pkg info}{#2} } }
\cs_if_exist:NF \PkgDescription
  { 
    \NewDocumentCommand \PkgDescription {m} 
      { 
        \noindent Package~ \textbf{\PkgInfo{#1}{name}}~Version:~\PkgInfo{#1}{version}~ -~ \PkgInfo{#1}{date}\par \emph{\PkgInfo{#1}{description}}~\par 
      } 
  }
%%%%%%%
%%% End of cut-n-paste
%%%%%%%




\cs_generate_variant:Nn \tl_set:Nn {Ne}

\keys_define:nn { ufrgscca / coord }
  {
    calendar-I. bool_set:N   = \l__ufrgscca_calendarI_bool ,
    calendar-I. usage:n       = general , 
    
    calendar-II. bool_set:N  = \l__ufrgscca_calendarII_bool ,
    calendar-II. usage:n      = general , 
    
    report-I. bool_set:N     = \l__ufrgscca_reportI_bool ,
    report-I. usage:n         = general , 
    
    report-II. bool_set:N    = \l__ufrgscca_reportII_bool ,
    report-II. usage:n        = general , 
    
    checklist-I. bool_set:N    = \l__ufrgscca_checklistI_bool ,
    checklist-I. usage:n        = general , 

    checklist-II. bool_set:N    = \l__ufrgscca_checklistII_bool ,
    checklist-II. usage:n        = general , 

    boards. bool_set:N       = \l__ufrgscca_boards_bool ,
    boards. usage:n           = general , 
    
    revforms-I. bool_set:N   = \l__ufrgscca_revformsI_bool ,
    revforms-I. usage:n       = general , 
    
    revforms-II. bool_set:N  = \l__ufrgscca_revformsII_bool ,
    revforms-II. usage:n      = general , 
    
    referral-I. bool_set:N   = \l__ufrgscca_referralI_bool ,
    referral-I. usage:n       = general , 
    
    referral-II. bool_set:N  = \l__ufrgscca_referralII_bool ,
    referral-II. usage:n      = general , 
    
    cocertificate. bool_set:N  = \l__ufrgscca_cocertificate_bool ,
    cocertificate. usage:n      = general , 
  }

\cs_new_protected:Npn \__ufrgscca_set_reports:n #1 
  {  \keys_set:nn { ufrgscca / coord }{#1}  }

\def\c@one#1:#2:{\csname #1\endcsname}
\def\c@two#1:#2:{\csname #1\endcsname[newpage]}
\def\tccoord@split#1:#2:#3#4#5,{#4#1:#2:}
\NewDocumentCommand{\tccoord@student@exec}{m}{\tccoord@split#1::\c@two\c@one\empty,}

\RequirePackage{longtable}
\RequirePackage{multirow}

\RequirePackage{ufrgscca-core}
\RequirePackage{ufrgscca-forms}
%\RequirePackage{pgfcalendar}

%

\NewDocumentCommand{\ActivitySetNewEvent}{O{}mm}{
  \tl_if_blank:nTF {#1}
    {
      \starray_new_term:nn {activity.calendar}{#2}
      \starray_gset_prop:nnn {activity.calendar}{event}{#3}
    }
    {
      \starray_new_term:nn {activity[#1].calendar}{#2}
      \starray_gset_prop:nnn {activity[#1].calendar}{event}{#3}
    }
}

\NewDocumentCommand{\ActivitySetEventDay}{O{}mmm}{
  \tl_if_blank:nTF {#1}
    {
      \starray_gset_from_keyval:nn {activity.calendar[#2]}
        {
            date = {#3} ,
            week = {#4} ,
        }
    }
    {
      \starray_gset_from_keyval:nn {activity[#1].calendar[#2]}
        {
            date = {#3} ,
            week = {#4} ,
        }
    }
}

%
\NewDocumentCommand{\studentfate}{O{}}{%%
  \str_case:nnF  {#1}
    {
      {C}
        {
          \starray_gset_from_keyval:nn {student} 
            {
              grade = C ,
              flag-exam = \c_true_bool ,
              flag-graded = \c_true_bool ,
              flag-approved = \c_true_bool ,
            }
        }
      {D}
        {
          \starray_gset_from_keyval:nn {student} 
            {
              grade = D ,
              flag-exam = \c_true_bool ,
              flag-graded = \c_true_bool ,
            }
        }
      {FF}
        {
          \starray_gset_from_keyval:nn {student} 
            {
              grade = FF ,
              flag-ff = \c_true_bool ,
              flag-graded = \c_true_bool ,
            }
        }
      {dismiss}
        {
          \starray_gset_from_keyval:nn {student} 
            {
              flag-dismiss = \c_true_bool ,
              flag-graded = \c_true_bool ,
            }
        }
      {none}
        {
          \starray_gset_from_keyval:nn {student} 
            {
              flag-dismiss = \c_true_bool ,
              flag-graded = \c_true_bool ,
            }
        }
    }
    { %% in case of none of above...
      \__ufrgscca_studentgrade:
    }
}%%
%
\tl_new:N \l__ufrgscca_tmpa_tl
\tl_new:N \l__ufrgscca_tmpb_tl
\tl_new:N \l__ufrgscca_tmpc_tl
\tl_new:N \l__ufrgscca_tmpd_tl
\cs_new_protected:Npn \__ufrgscca_studentgrade: 
    {
      %(\DataFields{student}{name})\par
      \starray_term_syntax:n {student.reviewer[1]}
      \tl_set:Ne \l__ufrgscca_tmpa_tl {\starray_parsed_get_prop:n {grade}}
      \starray_term_syntax:n {student.reviewer[2]}
      \tl_set:Ne \l__ufrgscca_tmpb_tl {\starray_parsed_get_prop:n {grade}}
      \starray_term_syntax:n {student.reviewer[3]}
      \tl_set:Ne \l__ufrgscca_tmpc_tl {\starray_parsed_get_prop:n {grade}}
      \int_case:nn {\starray_parsed_get_prop:n {gradetype}}
        {
          {1}
            {
              \tl_set:Ne \l__ufrgscca_tmpd_tl
                {\fpeval{round(((\l__ufrgscca_tmpb_tl + \l__ufrgscca_tmpc_tl)/2),2,1)}}
            }
          {2}
            {
              \tl_set:Ne \l__ufrgscca_tmpd_tl
                {\fpeval{round(((\l__ufrgscca_tmpa_tl + \l__ufrgscca_tmpb_tl + \l__ufrgscca_tmpc_tl)/3),2,1)}}
            }
        }
      \starray_gset_prop:nne {student}{gradeavrg}{\l__ufrgscca_tmpd_tl}
      \fp_compare:nNnTF {\l__ufrgscca_tmpd_tl} < {\UseConst{NgradeC}}
        { % D
          \starray_gset_prop:nnn {student}{grade}{D}
        }
        {
          \fp_compare:nNnTF {\l__ufrgscca_tmpd_tl} < {\UseConst{NgradeB}}
            { % C
              \starray_gset_prop:nnn {student}{grade}{C}
              \starray_gset_prop:nnn {student}{flag-approved}{\c_true_bool}
            }
            {
              \fp_compare:nNnTF {\l__ufrgscca_tmpd_tl} < {\UseConst{NgradeA}}
                { % B
                  \starray_gset_prop:nnn {student}{grade}{B}
                  \starray_gset_prop:nnn {student}{flag-approved}{\c_true_bool}
                }
                { % A
                  \starray_gset_prop:nnn {student}{grade}{A}
                  \starray_gset_prop:nnn {student}{flag-approved}{\c_true_bool}
                }
            }
        }

        \starray_gset_prop:nnn {student}{flag-graded}{\c_true_bool}
    }
%
\NewDocumentCommand{\timeslot}{O{}mm}{%%
  \starray_gset_from_keyval:nn {student}
    {
      board-local = #1 ,
      board-date = #2 ,
      board-time = #3 ,
    }
}%
%



\NewDocumentCommand{\studentCase}{mmmmm}{
    \starray_term_syntax:n{student}
    \bool_case:nF
    {
      {\starray_parsed_get_prop:n{flag-ff}}
        {#5}
      {\starray_parsed_get_prop:n{flag-exam}}
        {
          \bool_if:nTF{\starray_parsed_get_prop:n{flag-approved}}
            {#3}
            {#4}
        }
    }
    {
      \bool_if:nTF{\starray_parsed_get_prop:n{flag-approved}}
        {#1}
        {#2}
    }
}


\NewDocumentCommand{\studentDismissCase}{mm}{
    \starray_term_syntax:n{student}
    \bool_if:nTF {\starray_parsed_get_prop:n{flag-dismiss}}
      {#1}
      {#2}
}

\NewDocumentCommand{\studentremark}{m}{
  \starray_gset_prop:nnn {student}{remarks}{#1}
}



\NewDocumentCommand{\studentNewPageCase}{mm}
  {
    \starray_term_syntax:n{student}
    \bool_if:nTF {\starray_parsed_get_prop:n{flag-newpage}}
      {#1}
      {#2}
  }

\NewDocumentCommand{\studentnewpage}{O{}}{
  \tl_if_blank:nTF {#1}
    { \starray_gset_prop:nnn {student}{flag-newpage}{\c_true_bool} }
    { \starray_gset_prop:nnn {student[#1]}{flag-newpage}{\c_true_bool} }
}%



\NewDocumentCommand{\boardtitle}{m}{%%
  \SetTerms{%
    board.title = {#1} ,
  }
}%


\NewDocumentCommand{\boardobs}{m}{%%
  \SetTerms{%
    board.obs = {#1} ,
  }
}%


\NewDocumentCommand{\boarddate}{mm}{%%
  \SetConsts{%
    date:#1 = {#2} ,
  }
}%
%
\NewDocumentCommand{\semester}{m}{%%
  \SetTerms{%
    semester = {#1} ,
  }
}%
%


%%%%%%\NewDocumentCommand{\studentturnindate}{m}{\tccoord@studentdatesplit#1,}
%%%%%%%23/12/2022
%%%%%%
%%%%%%\def\tccoord@studentdatesplit#1/#2/#3,{
%%%%%%   \pgfcalendarifdate{#3-#2-#1}{at least=\tc@internshipcommitB+1}{\tccoord@studentFF}{}
%%%%%%   \pgfcalendarifdate{#3-#2-#1}{between=\tc@internshipcommitA+1 and \tc@internshipcommitB}{\tccoord@studentExam{X}}{}
%%%%%%   \expandafter\gdef\csname tc@student\Alph{tc@studentcount}date\endcsname{#1/#2/#3}%
%%%%%%}
%%%%%%
%%%%%%\NewDocumentCommand{\intershipcommitdates}{mm}{%
%%%%%%    \tccoord@commitdatesplit#1,A,%
%%%%%%    \tccoord@commitdatesplit#2,B,%
%%%%%%}
%%%%%%
%%%%%%\def\tccoord@commitdatesplit#1/#2/#3,#4,{
%%%%%%   \expandafter\xdef\csname tc@internshipcommit#4\endcsname{#3-#2-#1}%
%%%%%%   \expandafter\xdef\csname tc@internshipcommit#4#4\endcsname{#1/#2/#3}%
%%%%%%}


\cs_new_protected:Npn \__ufrgscca_checkedbox: 
  {  $\checkmark$  }

\cs_new_protected:Npn \__ufrgscca_uncheckedbox: 
  {  $\square$  }


\cs_generate_variant:Nn \starray_gset_prop:nnn {nne}


\NewDocumentCommand{\examinergrades}{mmmO{}}{
  \tl_if_blank:nTF {#1}
    { \starray_gset_prop:nnn {student.reviewer}{grade}{0} }
    {
      \tl_if_blank:nTF {#4}
        { %% 3 grades, TCC II
            \starray_gset_from_keyval:nn {student.reviewer}
              {
                pointA = #1 ,
                pointB = #2 ,
                pointC = #3 ,
                gradetype = 2 ,
              }
            \starray_gset_prop:nne {student.reviewer}{grade}
                {%
                    \fpeval{round((#1 * \UseConst{TCC-II.weightA} + #2 * \UseConst{TCC-II.weightB} + #3 * \UseConst{TCC-II.weightC}) / ( \UseConst{TCC-II.weightA} + \UseConst{TCC-II.weightB} + \UseConst{TCC-II.weightC}) , 2 , 1) }
                }
        }
        { %% 4 grades, TCC I
            \starray_gset_from_keyval:nn {student.reviewer}
              {
                pointA = #1 ,
                pointB = #2 ,
                pointC = #3 ,
                pointD = #4 ,
                gradetype = 1 ,
              }
            \starray_gset_prop:nne {student.reviewer}{grade}
                {%
                    \fpeval{round((#1 * \UseConst{TCC-I.weightA} + #2 * \UseConst{TCC-I.weightB} + #3 * \UseConst{TCC-I.weightC} + #4 * \UseConst{TCC-I.weightD}) / ( \UseConst{TCC-I.weightA} + \UseConst{TCC-I.weightB} + \UseConst{TCC-I.weightC} + \UseConst{TCC-I.weightD}) , 2 , 1) }
                }
    
        }
    }
  
}


\NewDocumentCommand{\setstudentlist}{O{tcc}mm}{
  \seq_new:c {l__ufrgscca_#2_seq}
  \seq_new:c {l__ufrgscca_#2_ff_seq}
  \seq_new:c {l__ufrgscca_#2_dismiss_seq}
  \seq_new:c {l__ufrgscca_#2_graded_seq}
  
  \seq_gset_from_clist:cn {l__ufrgscca_#2_seq}{#3}
  \str_case:nn {#1}
  {
    {tcc} 
      {
        \seq_map_tokens:cn {l__ufrgscca_#2_seq} {\__ufrgscca_grade:n}
        \seq_map_tokens:cn {l__ufrgscca_#2_seq} {\__ufrgscca_listclassify:nn {#2}}
      }
    {tccI} 
      {
        \seq_map_tokens:cn {l__ufrgscca_#2_seq} {\__ufrgscca_grade:n}
        \seq_map_tokens:cn {l__ufrgscca_#2_seq} {\__ufrgscca_listclassify:nn {#2}}
      }
    {tccII} 
      {
        \seq_map_tokens:cn {l__ufrgscca_#2_seq} {\__ufrgscca_grade:n}
        \seq_map_tokens:cn {l__ufrgscca_#2_seq} {\__ufrgscca_listclassify:nn {#2}}
      }
    {intern}
      {  %% TO BE IMPLEMENTED !!!
        \seq_map_tokens:cn {l__ufrgscca_#2_seq} {\__ufrgscca_grade:n}
        \seq_map_tokens:cn {l__ufrgscca_#2_seq} {\__ufrgscca_listclassify:nn {#2}}
      }
  }
}

\cs_new_protected:Npn \__ufrgscca_grade:n #1 
    {
      \starray_set_iter_from_hash:nn {student}{#1}
      \starray_term_syntax:n {student[#1]}
      \bool_if:nF {\starray_parsed_get_prop:n {flag-graded}}
        { \__ufrgscca_studentgrade: }        
    }


\cs_new_protected:Npn \__ufrgscca_listclassify:nn #1#2
    {
      \starray_set_iter_from_hash:nn {student}{#2}
      \starray_term_syntax:n {student}
      \bool_case:nF
        {
          {\starray_parsed_get_prop:n {flag-ff}}{\seq_gput_right:cn {l__ufrgscca_#1_ff_seq}{#2}}
          {\starray_parsed_get_prop:n {flag-dismiss}}{\seq_gput_right:cn {l__ufrgscca_#1_dismiss_seq}{#2}}
        }
        {\seq_gput_right:cn {l__ufrgscca_#1_graded_seq}{#2}}
      
    }


\NewDocumentCommand{\tcreports}{O{}m}{
  {
      \__ufrgscca_set_reports:n {#1}
      \seq_gset_eq:Nc \l__ufrgscca_baselist_seq {l__ufrgscca_#2_seq}
      \seq_gset_eq:Nc \l__ufrgscca_baselist_ff_seq {l__ufrgscca_#2_ff_seq}
      \seq_gset_eq:Nc \l__ufrgscca_baselist_dismiss_seq {l__ufrgscca_#2_dismiss_seq}
      \seq_gset_eq:Nc \l__ufrgscca_baselist_graded_seq {l__ufrgscca_#2_graded_seq}
    
      \bool_if:NT \l__ufrgscca_calendarI_bool
        { \MakeForm{calendar-I} }
      \bool_if:NT \l__ufrgscca_calendarII_bool
        { \MakeForm{calendar-II} }
      \bool_if:NT \l__ufrgscca_reportI_bool
        { \MakeForm{report-I} }
      \bool_if:NT \l__ufrgscca_reportII_bool
        { \MakeForm{report-II} }
      \bool_if:NT \l__ufrgscca_checklistI_bool
        { \MakeForm{checklist-I} }
      \bool_if:NT \l__ufrgscca_checklistII_bool
        { \MakeForm{checklist-II} }
      \bool_if:NT \l__ufrgscca_boards_bool
        { \MakeForm{boards} }      
      \seq_map_inline:cn {l__ufrgscca_baselist_seq} 
        {
          \studentselect{##1}
          \bool_if:NT \l__ufrgscca_cocertificate_bool
            {
              \studentCoadvCase
                {\MakeForm{cocertificate}}
                {}
            }
          \bool_if:NT \l__ufrgscca_referralI_bool
            {
              \studentDismissCase
                {}
                { \MakeForm{referral-I} }
            }
          \bool_if:NT \l__ufrgscca_revformsI_bool
            {
              \SetReviewer{2}
              \MakeForm{examinersform-I}
              \SetReviewer{3}
              \MakeForm{examinersform-I}
              \MakeForm{rectifyapproval-I}
            }
          \bool_if:NT \l__ufrgscca_referralII_bool
            {
              \MakeForm{referral-II}
            }
          \bool_if:NT \l__ufrgscca_revformsII_bool
            {
              \SetReviewer{1}
              \MakeForm{examinersform-II}
              \MakeForm{correctionsform-II}
              \SetReviewer{2}
              \MakeForm{examinersform-II}
              \MakeForm{correctionsform-II}
              \SetReviewer{3}
              \MakeForm{examinersform-II}
              \MakeForm{correctionsform-II}
              \MakeForm{rectifyapproval-II}
            }
        }
  }
}


\prop_new:N \l__ufrgscca_check_prop
\prop_new:N \l__ufrgscca_checkA_prop
\prop_new:N \l__ufrgscca_checkB_prop
\prop_new:N \l__ufrgscca_checkref_prop

\NewDocumentCommand{\checkdef}{mmm}{
  \starray_get_prop:nnN {activity}{chkmarked}\l__ufrgscca_check_prop
  \prop_gput:Nnn \l__ufrgscca_check_prop {#1}{\__ufrgscca_checkedbox:~\ #3}
  \starray_gset_prop:nnV {activity}{chkmarked}\l__ufrgscca_check_prop

  \starray_get_prop:nnN {activity}{chkunmarked}\l__ufrgscca_check_prop
  \prop_gput:Nnn \l__ufrgscca_check_prop {#1}{\__ufrgscca_uncheckedbox:~\ #3}
  \starray_gset_prop:nnV {activity}{chkunmarked}\l__ufrgscca_check_prop
  
  \starray_get_prop:nnN {activity}{chkref}\l__ufrgscca_check_prop
  \prop_gput:Nnn \l__ufrgscca_check_prop {#2}{#1}
  \starray_gset_prop:nnV {activity}{chkref}\l__ufrgscca_check_prop
}

\cs_generate_variant:Nn \prop_gput:Nnn {Nee}


\tl_new:N \l__ufrgscca_checkB_tl
\tl_new:N \l__ufrgscca_checkref_tl
\NewDocumentCommand{\checklist}{O{}m}{
  \tl_if_blank:nF {#1}
    {  \starray_set_iter_from_hash:nn {activity}{#1}  }
  \starray_get_prop:nnN {student}{checklist}\l__ufrgscca_check_prop
  \starray_get_prop:nnN {activity}{chkmarked}\l__ufrgscca_checkB_prop
  \starray_get_prop:nnN {activity}{chkref}\l__ufrgscca_checkref_prop
  \clist_map_inline:nn {#2}
    {
      \prop_get:NnNT \l__ufrgscca_checkref_prop {##1} \l__ufrgscca_checkref_tl
        {
          \prop_get:NeN \l__ufrgscca_checkB_prop {\l__ufrgscca_checkref_tl} \l__ufrgscca_checkB_tl
          \prop_gput:Nee \l__ufrgscca_check_prop {\l__ufrgscca_checkref_tl} {\l__ufrgscca_checkB_tl}
        }
    }
    \starray_gset_prop:nnV {student}{checklist}{\l__ufrgscca_check_prop}
}

\prop_new:N \l__ufrgscca_check_list_prop
\tl_new:N \l__ufrgscca_tmpx_tl
\tl_new:N \l__ufrgscca_tmpy_tl
\tl_new:N \l__ufrgscca_table_tl


\cs_new_protected:Npn \__ufrgscca_checktable_lines:nn #1#2 {
  \starray_get_prop:nnN {activity} {chkunmarked} \l__ufrgscca_checkA_prop
  \starray_get_prop:nnN {student}{checklist}\l__ufrgscca_check_prop
  
  \prop_map_inline:Nn \l__ufrgscca_check_prop
    { \prop_gput:Nnn \l__ufrgscca_checkA_prop {##1}{##2}  }  

  \tl_gclear:N \l__ufrgscca_table_tl
  \clist_map_inline:nn {#1}    
    { 
      \tl_gclear:N \l_tmpa_tl    
      \clist_map_inline:nn {#2}
        {       
         \tl_gset:Nn \l__ufrgscca_tmpx_tl {##1####1} 
         \prop_get:NeNTF \l__ufrgscca_checkA_prop {\l__ufrgscca_tmpx_tl} \l__ufrgscca_tmpy_tl
           {\tl_gput_right:Ne \l__ufrgscca_table_tl {\l_tmpa_tl~ \l__ufrgscca_tmpy_tl}}
           {\tl_gput_right:Ne \l__ufrgscca_table_tl {\l_tmpa_tl~ }}
         \tl_gset:Nn \l_tmpa_tl {~&~}
        }
      \tl_put_right:Nn \l__ufrgscca_table_tl {\\*}
    }
    \l__ufrgscca_table_tl   
}

